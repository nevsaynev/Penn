<?xml version="1.0" encoding="UTF-8"?>
<model version="2.3.2">
 <documentation>Dining Philosopher Problem
with the preemptive QK kernel example</documentation>
 <framework name="qpcpp"/>
 <package name="Events" stereotype="0x01">
  <class name="TableEvt" superclass="qpcpp::QEvt">
   <attribute name="philoNum" type="uint8_t" visibility="0x00" properties="0x00"/>
  </class>
 </package>
 <package name="AOs" stereotype="0x02">
  <class name="Philo" superclass="qpcpp::QActive">
   <attribute name="m_timeEvt" type="QP::QTimeEvt" visibility="0x02" properties="0x00"/>
   <operation name="Philo" type="QActive(Q_STATE_CAST(&amp;Philo::initial)), m_timeEvt(TIMEOUT_SIG)" visibility="0x00" properties="0x00">
    <code>// empty</code>
   </operation>
   <statechart>
    <initial target="../1">
     <action>(void)e; // suppress the compiler warning about unused parameter
me-&gt;subscribe(EAT_SIG);</action>
     <initial_glyph conn="2,3,5,1,20,5,-3">
      <action box="0,-2,6,2"/>
     </initial_glyph>
    </initial>
    <state name="thinking">
     <entry>me-&gt;m_timeEvt.postIn(me, think_time());</entry>
     <exit>(void)me-&gt;m_timeEvt.disarm();</exit>
     <tran trig="TIMEOUT" target="../../2">
      <tran_glyph conn="2,14,3,1,20,11,-3">
       <action box="0,-2,6,2"/>
      </tran_glyph>
     </tran>
     <tran trig="EAT, DONE">
      <action>/* EAT or DONE must be for other Philos than this one */
Q_ASSERT(Q_EVT_CAST(TableEvt)-&gt;philoNum != PHILO_ID(me));</action>
      <tran_glyph conn="2,18,3,-1,13">
       <action box="0,-2,14,2"/>
      </tran_glyph>
     </tran>
     <state_glyph node="2,5,17,16">
      <entry box="1,2,5,2"/>
      <exit box="1,4,5,2"/>
     </state_glyph>
    </state>
    <state name="hungry">
     <entry>TableEvt *pe = Q_NEW(TableEvt, HUNGRY_SIG);
pe-&gt;philoNum = PHILO_ID(me);
AO_Table-&gt;POST(pe, me);</entry>
     <tran trig="EAT">
      <choice target="../../../3">
       <guard>Q_EVT_CAST(TableEvt)-&gt;philoNum == PHILO_ID(me)</guard>
       <choice_glyph conn="15,30,5,1,7,13,-3">
        <action box="1,0,19,4"/>
       </choice_glyph>
      </choice>
      <tran_glyph conn="2,30,3,-1,13">
       <action box="0,-2,14,2"/>
      </tran_glyph>
     </tran>
     <tran trig="DONE">
      <action>/* DONE must be for other Philos than this one */
Q_ASSERT(Q_EVT_CAST(TableEvt)-&gt;philoNum != PHILO_ID(me));</action>
      <tran_glyph conn="2,36,3,-1,14">
       <action box="0,-2,14,2"/>
      </tran_glyph>
     </tran>
     <state_glyph node="2,23,17,16">
      <entry box="1,2,5,2"/>
     </state_glyph>
    </state>
    <state name="eating">
     <entry>me-&gt;m_timeEvt.postIn(me, eat_time());</entry>
     <exit>TableEvt *pe = Q_NEW(TableEvt, DONE_SIG);
pe-&gt;philoNum = PHILO_ID(me);
QP::QF::PUBLISH(pe, me);
(void)me-&gt;m_timeEvt.disarm();</exit>
     <tran trig="TIMEOUT" target="../../1">
      <tran_glyph conn="2,51,3,1,22,-41,-5">
       <action box="0,-2,6,2"/>
      </tran_glyph>
     </tran>
     <tran trig="EAT, DONE">
      <action>/* EAT or DONE must be for other Philos than this one */
Q_ASSERT(Q_EVT_CAST(TableEvt)-&gt;philoNum != PHILO_ID(me));</action>
      <tran_glyph conn="2,55,3,-1,13">
       <action box="0,-2,14,2"/>
      </tran_glyph>
     </tran>
     <state_glyph node="2,41,17,18">
      <entry box="1,2,5,2"/>
      <exit box="1,4,5,2"/>
     </state_glyph>
    </state>
    <state_diagram size="36,61"/>
   </statechart>
  </class>
  <class name="Table" superclass="qpcpp::QActive">
   <attribute name="m_fork[N_PHILO]" type="uint8_t" visibility="0x02" properties="0x00"/>
   <attribute name="m_isHungry[N_PHILO]" type="bool" visibility="0x02" properties="0x00"/>
   <operation name="Table" type="QActive(Q_STATE_CAST(&amp;Table::initial))" visibility="0x00" properties="0x00">
    <code>for (uint8_t n = 0U; n &lt; N_PHILO; ++n) {
    m_fork[n] = FREE;
    m_isHungry[n] = false;
}</code>
   </operation>
   <statechart>
    <initial target="../1/2">
     <action>(void)e; // suppress the compiler warning about unused parameter
me-&gt;subscribe(DONE_SIG);
me-&gt;subscribe(PAUSE_SIG);
me-&gt;subscribe(TERMINATE_SIG);

for (uint8_t n = 0U; n &lt; N_PHILO; ++n) {
    me-&gt;m_fork[n] = FREE;
    me-&gt;m_isHungry[n] = false;
    BSP_displayPhilStat(n, THINKING);
}</action>
     <initial_glyph conn="3,3,5,1,43,17,-8">
      <action box="0,-2,6,2"/>
     </initial_glyph>
    </initial>
    <state name="active">
     <tran trig="TERMINATE">
      <action>BSP_terminate(0);</action>
      <tran_glyph conn="2,11,3,-1,14">
       <action box="0,-2,11,4"/>
      </tran_glyph>
     </tran>
     <tran trig="EAT">
      <action>Q_ERROR();</action>
      <tran_glyph conn="2,15,3,-1,14">
       <action box="0,-2,10,4"/>
      </tran_glyph>
     </tran>
     <state name="serving">
      <entry brief="give pending permitions to eat">for (uint8_t n = 0U; n &lt; N_PHILO; ++n) { // give permissions to eat...
    if (me-&gt;m_isHungry[n]
        &amp;&amp; (me-&gt;m_fork[LEFT(n)] == FREE)
        &amp;&amp; (me-&gt;m_fork[n] == FREE))
    {
        me-&gt;m_fork[LEFT(n)] = USED;
        me-&gt;m_fork[n] = USED;
        TableEvt *te = Q_NEW(TableEvt, EAT_SIG);
        te-&gt;philoNum = n;
        QP::QF::PUBLISH(te, me);
        me-&gt;m_isHungry[n] = false;
        BSP_displayPhilStat(n, EATING);
    }
}</entry>
      <tran trig="HUNGRY">
       <action>uint8_t n = Q_EVT_CAST(TableEvt)-&gt;philoNum;
// phil ID must be in range and he must be not hungry
Q_ASSERT((n &lt; N_PHILO) &amp;&amp; (!me-&gt;m_isHungry[n]));

BSP_displayPhilStat(n, HUNGRY);
uint8_t m = LEFT(n);</action>
       <choice>
        <guard brief="both free">(me-&gt;m_fork[m] == FREE) &amp;&amp; (me-&gt;m_fork[n] == FREE)</guard>
        <action>me-&gt;m_fork[m] = USED;
me-&gt;m_fork[n] = USED;
TableEvt *pe = Q_NEW(TableEvt, EAT_SIG);
pe-&gt;philoNum = n;
QP::QF::PUBLISH(pe, me);
BSP_displayPhilStat(n, EATING);</action>
        <choice_glyph conn="19,25,5,-1,10">
         <action box="1,0,10,2"/>
        </choice_glyph>
       </choice>
       <choice>
        <guard>else</guard>
        <action>me-&gt;m_isHungry[n] = true;</action>
        <choice_glyph conn="19,25,4,-1,5,10">
         <action box="1,5,6,2"/>
        </choice_glyph>
       </choice>
       <tran_glyph conn="4,25,3,-1,15">
        <action box="0,-2,8,2"/>
       </tran_glyph>
      </tran>
      <tran trig="DONE">
       <action>uint8_t n = Q_EVT_CAST(TableEvt)-&gt;philoNum;
// phil ID must be in range and he must be not hungry
Q_ASSERT((n &lt; N_PHILO) &amp;&amp; (!me-&gt;m_isHungry[n]));

BSP_displayPhilStat(n, THINKING);
uint8_t m = LEFT(n);
// both forks of Phil[n] must be used
Q_ASSERT((me-&gt;m_fork[n] == USED) &amp;&amp; (me-&gt;m_fork[m] == USED));

me-&gt;m_fork[m] = FREE;
me-&gt;m_fork[n] = FREE;
m = RIGHT(n); // check the right neighbor

if (me-&gt;m_isHungry[m] &amp;&amp; (me-&gt;m_fork[m] == FREE)) {
    me-&gt;m_fork[n] = USED;
    me-&gt;m_fork[m] = USED;
    me-&gt;m_isHungry[m] = false;
    TableEvt *pe = Q_NEW(TableEvt, EAT_SIG);
    pe-&gt;philoNum = m;
    QP::QF::PUBLISH(pe, me);
    BSP_displayPhilStat(m, EATING);
}
m = LEFT(n); // check the left neighbor
n = LEFT(m); // left fork of the left neighbor
if (me-&gt;m_isHungry[m] &amp;&amp; (me-&gt;m_fork[n] == FREE)) {
    me-&gt;m_fork[m] = USED;
    me-&gt;m_fork[n] = USED;
    me-&gt;m_isHungry[m] = false;
    TableEvt *pe = Q_NEW(TableEvt, EAT_SIG);
    pe-&gt;philoNum = m;
    QP::QF::PUBLISH(pe, me);
    BSP_displayPhilStat(m, EATING);
}</action>
       <tran_glyph conn="4,33,3,-1,15">
        <action box="0,-2,6,2"/>
       </tran_glyph>
      </tran>
      <tran trig="EAT">
       <action>Q_ERROR();</action>
       <tran_glyph conn="4,36,3,-1,15">
        <action box="0,-2,12,4"/>
       </tran_glyph>
      </tran>
      <tran trig="PAUSE" target="../../3">
       <tran_glyph conn="4,40,3,1,36,7,-2">
        <action box="0,-2,7,2"/>
       </tran_glyph>
      </tran>
      <state_glyph node="4,18,34,24">
       <entry box="1,2,27,2"/>
      </state_glyph>
     </state>
     <state name="paused">
      <entry>BSP_displayPaused(1U);</entry>
      <exit>BSP_displayPaused(0U);</exit>
      <tran trig="PAUSE" target="../../2">
       <tran_glyph conn="4,57,3,1,38,-21,-4">
        <action box="0,-2,7,2"/>
       </tran_glyph>
      </tran>
      <tran trig="HUNGRY">
       <action>uint8_t n = Q_EVT_CAST(TableEvt)-&gt;philoNum;
// philo ID must be in range and he must be not hungry
Q_ASSERT((n &lt; N_PHILO) &amp;&amp; (!me-&gt;m_isHungry[n]));
me-&gt;m_isHungry[n] = true;
BSP_displayPhilStat(n, HUNGRY);</action>
       <tran_glyph conn="4,60,3,-1,15">
        <action box="0,-2,6,2"/>
       </tran_glyph>
      </tran>
      <tran trig="DONE">
       <action>uint8_t n = Q_EVT_CAST(TableEvt)-&gt;philoNum;
// phil ID must be in range and he must be not hungry
Q_ASSERT((n &lt; N_PHILO) &amp;&amp; (!me-&gt;m_isHungry[n]));

BSP_displayPhilStat(n, THINKING);
uint8_t m = LEFT(n);
/* both forks of Phil[n] must be used */
Q_ASSERT((me-&gt;m_fork[n] == USED) &amp;&amp; (me-&gt;m_fork[m] == USED));

me-&gt;m_fork[m] = FREE;
me-&gt;m_fork[n] = FREE;</action>
       <tran_glyph conn="4,63,3,-1,15">
        <action box="0,-2,6,2"/>
       </tran_glyph>
      </tran>
      <state_glyph node="4,45,34,20">
       <entry box="1,2,18,4"/>
       <exit box="1,6,18,4"/>
      </state_glyph>
     </state>
     <state_glyph node="2,5,42,62"/>
    </state>
    <state_diagram size="48,69"/>
   </statechart>
  </class>
  <attribute name="AO_Philo[N_PHILO]" type="QP::QActive * const" visibility="0x00" properties="0x00"/>
  <attribute name="AO_Table" type="QP::QActive * const" visibility="0x00" properties="0x00"/>
 </package>
 <directory name=".">
  <file name="bsp.h">
   <text>#ifndef bsp_h
#define bsp_h

#include &lt;avr/io.h&gt; // AVR I/O

// Sys timer tick per seconds
#define BSP_TICKS_PER_SEC    100U

void BSP_init(void);
void BSP_displayPaused(uint8_t const paused);
void BSP_displayPhilStat(uint8_t const n, char_t const *stat);
void BSP_terminate(int16_t const result);

void BSP_randomSeed(uint32_t const seed); // random seed
uint32_t BSP_random(void);                // pseudo-random generator

//////////////////////////////////////////////////////////////////////////////
// NOTE: The CPU clock frequency F_CPU is defined externally for each
// Arduino board

#endif  // bsp_h
</text>
  </file>
  <file name="bsp.cpp">
   <text>#include &quot;qp_port.h&quot;
#include &quot;dpp.h&quot;
#include &quot;bsp.h&quot;
#include &quot;Arduino.h&quot;  // Arduino include file

Q_DEFINE_THIS_FILE

//#define SAVE_POWER

#define USER_LED_ON()      (PORTB |= (1 &lt;&lt; (5)))
#define USER_LED_OFF()     (PORTB &amp;= ~(1 &lt;&lt; (5)))
#define USER_LED_TOGGLE()  (PORTB ^= (1 &lt;&lt; (5)))

#define TICK_DIVIDER       ((F_CPU / BSP_TICKS_PER_SEC / 1024) - 1)

#if TICK_DIVIDER &gt; 255
#   error BSP_TICKS_PER_SEC too small
#elif TICK_DIVIDER &lt; 2
#   error BSP_TICKS_PER_SEC too large
#endif

// local variables -----------------------------------------------------------
static uint32_t l_rnd;                                          // random seed

#ifdef Q_SPY
uint8_t l_TIMER2_COMPA;
#endif


// ISRs ----------------------------------------------------------------------
ISR(TIMER2_COMPA_vect) {
    // No need to clear the interrupt source since the Timer2 compare
    // interrupt is automatically cleard in hardware when the ISR runs.

    QK_ISR_ENTRY();                         // infrom QK about entering an ISR

    QF::TICK(&amp;l_TIMER2_COMPA);                // process all armed time events

    if (Serial.available() &gt; 0) {
        switch (Serial.read()) {                     // read the incoming byte
            case 'p':
            case 'P':
                QF::PUBLISH(Q_NEW(QEvt, PAUSE_SIG), &amp;l_TIMER2_COMPA);
                break;
        }
    }

    QK_ISR_EXIT();                           // infrom QK about exiting an ISR
}

//............................................................................
void QF::onStartup(void) {
          // set Timer2 in CTC mode, 1/1024 prescaler, start the timer ticking
    TCCR2A = ((1 &lt;&lt; WGM21) | (0 &lt;&lt; WGM20));
    TCCR2B = (( 1 &lt;&lt; CS22 ) | ( 1 &lt;&lt; CS21 ) | ( 1 &lt;&lt; CS20 ));        // 1/2^10
    ASSR &amp;= ~(1&lt;&lt;AS2);
    TIMSK2 = (1 &lt;&lt; OCIE2A);                 // Enable TIMER2 compare Interrupt
    TCNT2 = 0;
    OCR2A = TICK_DIVIDER;     // must be loaded last for Atmega168 and friends
}
//............................................................................
void QF::onCleanup(void) {
}
//............................................................................
void QK::onIdle() {

    QF_INT_DISABLE();
    USER_LED_ON();     // toggle the User LED on Arduino on and off, see NOTE1
    USER_LED_OFF();
    QF_INT_ENABLE();

#ifdef SAVE_POWER

    SMCR = (0 &lt;&lt; SM0) | (1 &lt;&lt; SE);  // idle sleep mode, adjust to your project

    __asm__ __volatile__ (&quot;sleep&quot; &quot;\n\t&quot; :: );

    SMCR = 0;                                              // clear the SE bit

#endif
}
//............................................................................
void Q_onAssert(char const Q_ROM * const Q_ROM_VAR file, int line) {
    QF_INT_DISABLE();                                // disable all interrupts
    USER_LED_ON();                                  // User LED permanently ON
    asm volatile (&quot;jmp 0x0000&quot;);    // perform a software reset of the Arduino
}

//............................................................................
void BSP_init(void) {
    DDRB  = 0xFF;                     // All PORTB pins are outputs (user LED)
    PORTB = 0x00;                                        // drive all pins low

    Serial.begin(115200);
    Serial.println(&quot;Start&quot;);

    if (QS_INIT((void *)0) == 0) {       // initialize the QS software tracing
        Q_ERROR();
    }
    QS_RESET();
    QS_OBJ_DICTIONARY(&amp;l_SysTick_Handler);

    BSP_randomSeed(1234U);
}
//............................................................................
void BSP_terminate(int16_t result) {
    (void)result;
}
//............................................................................
void BSP_displayPaused(uint8_t paused) {
    if (paused) {
        Serial.println(F(&quot;Paused ON&quot;));
    }
    else {
        Serial.println(F(&quot;Paused OFF&quot;));
    }
}
//............................................................................
void BSP_displayPhilStat(uint8_t n, char_t const *stat) {
    Serial.print(F(&quot;Philosopher &quot;));
    Serial.print( n, DEC);
    Serial.print(F(&quot; &quot;));
    Serial.println(stat);
}
//............................................................................
uint32_t BSP_random(void) {     // a very cheap pseudo-random-number generator
    // &quot;Super-Duper&quot; Linear Congruential Generator (LCG)
    // LCG(2^32, 3*7*11*13*23, 0, seed)
    //
    l_rnd = l_rnd * (3*7*11*13*23);
    return l_rnd &gt;&gt; 8;
}
//............................................................................
void BSP_randomSeed(uint32_t seed) {
    l_rnd = seed;
}

//////////////////////////////////////////////////////////////////////////////
// NOTE1:
// The Arduino's User LED is used to visualize the idle loop activity.
// The brightness of the LED is proportional to the frequency of invcations
// of the idle loop. Please note that the LED is toggled with interrupts
// locked, so no interrupt execution time contributes to the brightness of
// the User LED.
//

</text>
  </file>
  <file name="dpp.h">
   <text>#ifndef dpp_h
#define dpp_h

using namespace QP;

enum DPPSignals {
    EAT_SIG = Q_USER_SIG, // published by Table to let a philosopher eat
    DONE_SIG,             // published by Philosopher when done eating
    PAUSE_SIG,            // published by BSP to pause the application
    TERMINATE_SIG,        // published by BSP to terminate the application
    MAX_PUB_SIG,          // the last published signal

    HUNGRY_SIG,           // posted direclty to Table from hungry Philo
    MAX_SIG               // the last signal
};

$declare(Events::TableEvt)

// number of philosophers
#define N_PHILO ((uint8_t)5)

$declare(AOs::AO_Philo[N_PHILO])
$declare(AOs::AO_Table)

#endif                        // dpp_h</text>
  </file>
  <file name="philo.cpp">
   <text>#include &quot;qp_port.h&quot;
#include &quot;dpp.h&quot;
#include &quot;bsp.h&quot;

Q_DEFINE_THIS_FILE

// Active object class -------------------------------------------------------
$declare(AOs::Philo)

// Local objects -------------------------------------------------------------
static Philo l_philo[N_PHILO];   // storage for all Philos

// helper function to provide a randomized think time for Philos
inline QP::QTimeEvtCtr think_time() {
    return static_cast&lt;QP::QTimeEvtCtr&gt;((BSP_random() % BSP_TICKS_PER_SEC)
                                        + (BSP_TICKS_PER_SEC/2U));
}

// helper function to provide a randomized eat time for Philos
inline QP::QTimeEvtCtr eat_time() {
    return static_cast&lt;QP::QTimeEvtCtr&gt;((BSP_random() % BSP_TICKS_PER_SEC)
                                        + BSP_TICKS_PER_SEC);
}

// helper function to provide the ID of Philo &quot;me&quot;
inline uint8_t PHILO_ID(Philo const * const me) {
    return static_cast&lt;uint8_t&gt;(me - l_philo);
}

enum InternalSignals {           // internal signals
    TIMEOUT_SIG = MAX_SIG
};

// Global objects ------------------------------------------------------------
QP::QActive * const AO_Philo[N_PHILO] = { // &quot;opaque&quot; pointers to Philo AO
    &amp;l_philo[0],
    &amp;l_philo[1],
    &amp;l_philo[2],
    &amp;l_philo[3],
    &amp;l_philo[4]
};

// Philo definition ----------------------------------------------------------
$define(AOs::Philo)</text>
  </file>
  <file name="table.cpp">
   <text>#include &quot;qp_port.h&quot;
#include &quot;dpp.h&quot;
#include &quot;bsp.h&quot;

Q_DEFINE_THIS_FILE

// Active object class -------------------------------------------------------
$declare(AOs::Table)

// helper function to provide the RIGHT neighbour of a Philo[n]
inline uint8_t RIGHT(uint8_t const n) {
    return static_cast&lt;uint8_t&gt;((n + (N_PHILO - 1U)) % N_PHILO);
}

// helper function to provide the LEFT neighbour of a Philo[n]
inline uint8_t LEFT(uint8_t const n) {
    return static_cast&lt;uint8_t&gt;((n + 1U) % N_PHILO);
}

static uint8_t const FREE = static_cast&lt;uint8_t&gt;(0);
static uint8_t const USED = static_cast&lt;uint8_t&gt;(1);

static char_t const * const THINKING = &amp;&quot;thinking&quot;[0];
static char_t const * const HUNGRY   = &amp;&quot;hungry  &quot;[0];
static char_t const * const EATING   = &amp;&quot;eating  &quot;[0];

// Local objects -------------------------------------------------------------
static Table l_table; // the single instance of the Table active object

// Global-scope objects ------------------------------------------------------
QP::QActive * const AO_Table = &amp;l_table; // &quot;opaque&quot; AO pointer

//............................................................................
$define(AOs::Table)</text>
  </file>
  <file name="dpp_qk.ino">
   <text>#include &quot;qp_port.h&quot;
#include &quot;dpp.h&quot;
#include &quot;bsp.h&quot;
#include &quot;Arduino.h&quot;   // don't forget to include

// Local-scope objects -------------------------------------------------------
static QEvent const *l_tableQueueSto[N_PHILO];
static QEvent const *l_philoQueueSto[N_PHILO][N_PHILO];
static QSubscrList   l_subscrSto[MAX_PUB_SIG];

static QF_MPOOL_EL(TableEvt) l_smlPoolSto[2*N_PHILO];//storage for small epool

//............................................................................
void setup() {
    QF::init();       // initialize the framework and the underlying RT kernel

    BSP_init();                                          // initialize the BSP

                                                  // initialize event pools...
    QF::poolInit(l_smlPoolSto, sizeof(l_smlPoolSto), sizeof(l_smlPoolSto[0]));

    QF::psInit(l_subscrSto, Q_DIM(l_subscrSto));     // init publish-subscribe

                                                // start the active objects...
    for (uint8_t n = 0U; n &lt; N_PHILO; ++n) {
        AO_Philo[n]-&gt;start((uint8_t)(n + 1U),
                    l_philoQueueSto[n], Q_DIM(l_philoQueueSto[n]),
                    (void *)0, 0U);
    }
    AO_Table-&gt;start((uint8_t)(N_PHILO + 1U),
                    l_tableQueueSto, Q_DIM(l_tableQueueSto),
                    (void *)0, 0U);
}

//////////////////////////////////////////////////////////////////////////////
// NOTE: Do not define the loop() function, because this function is
// already defined in the QP port to Arduino</text>
  </file>
 </directory>
</model>
