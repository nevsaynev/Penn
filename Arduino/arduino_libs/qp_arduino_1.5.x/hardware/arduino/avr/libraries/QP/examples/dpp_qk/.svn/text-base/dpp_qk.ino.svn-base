//////////////////////////////////////////////////////////////////////////////
// Model: dpp.qm
// File:  ./dpp_qk.ino
//
// This code has been generated by QM tool (see state-machine.com/qm).
// DO NOT EDIT THIS FILE MANUALLY. All your changes will be lost.
//
// This program is open source software: you can redistribute it and/or
// modify it under the terms of the GNU General Public License as published
// by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful, but
// WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
// or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License
// for more details.
//////////////////////////////////////////////////////////////////////////////
// @(/3/5) ...................................................................
#include "qp_port.h"
#include "dpp.h"
#include "bsp.h"
#include "Arduino.h"   // don't forget to include

// Local-scope objects -------------------------------------------------------
static QEvent const *l_tableQueueSto[N_PHILO];
static QEvent const *l_philoQueueSto[N_PHILO][N_PHILO];
static QSubscrList   l_subscrSto[MAX_PUB_SIG];

static QF_MPOOL_EL(TableEvt) l_smlPoolSto[2*N_PHILO];//storage for small epool

//............................................................................
void setup() {
    QF::init();       // initialize the framework and the underlying RT kernel

    BSP_init();                                          // initialize the BSP

                                                  // initialize event pools...
    QF::poolInit(l_smlPoolSto, sizeof(l_smlPoolSto), sizeof(l_smlPoolSto[0]));

    QF::psInit(l_subscrSto, Q_DIM(l_subscrSto));     // init publish-subscribe

                                                // start the active objects...
    for (uint8_t n = 0U; n < N_PHILO; ++n) {
        AO_Philo[n]->start((uint8_t)(n + 1U),
                    l_philoQueueSto[n], Q_DIM(l_philoQueueSto[n]),
                    (void *)0, 0U);
    }
    AO_Table->start((uint8_t)(N_PHILO + 1U),
                    l_tableQueueSto, Q_DIM(l_tableQueueSto),
                    (void *)0, 0U);
}

//////////////////////////////////////////////////////////////////////////////
// NOTE: Do not define the loop() function, because this function is
// already defined in the QP port to Arduino
